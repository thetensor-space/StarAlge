/*
 * Created on 4/29/2022 by PAB
 * Utility functions. Some ultimately belong elsewhere.
*/


// basic functions for *-algebras

StarTrace := function (A, z) 
return z + z @ A`Star; 
end function;

StarNorm := function (A, z) 
return (z @ A`Star) * z; 
end function;

StarDelta := function (A, z) 
return StarTrace (A, z) + StarNorm (A, z); 
end function;


/*  
  stabilizer function requested by James in email 8/4/2021

  Given a polar space V and vector v in V, 
  compute the stabilizer of v inside Isom(V)
*/

__MyVectorStabilizerGL := function (u)
  U := Parent (u);
  n := Dimension (U);
  F := BaseRing (U);
  C := Complement (U, sub < U | u >);
  T := Matrix ([u] cat Basis (C));
  one := Identity (MatrixAlgebra (F, n));
  G := GL (n-1, F);
  gens := [ GL(n,F)!InsertBlock (one, G.i, 2, 2) : i in [1..Ngens (G)] ];
  for i in [2..n] do
    Z := one;
    Z[i][1] := F!1;
    Append (~gens, GL(n,F)!Z);
  end for;
  gens := [ T^-1 * gens[i] * T : i in [1..#gens] ];
  assert forall { g : g in gens | u * g eq u };
return sub < GL (n, F) | gens >;
end function;


__MyVectorStabilizerNondegenerate := function (U, u)

  n := Dimension (U);
  F := BaseRing (U);

  // case 1: u is anisotropic
  if InnerProduct (u, u) ne 0 then
    W := OrthogonalComplement (U, sub<U|u>);
    assert Dimension (W) eq n-1;
    T := Matrix ([u] cat Basis (W));
    X := InnerProductMatrix (U);
    Y := T * X * Transpose (T);
    Y0 := ExtractBlock (Y, 2, 2, n-1, n-1);
    W0 := VectorSpace (F, n-1, Y0);
    G := IsometryGroup (W0);
    one := Identity (MatrixAlgebra (F, n));
    gens := [ GL(n,F)!InsertBlock (one, G.i, 2, 2) : i in [1..Ngens (G)] ];

  // case 2: u is isotropic
  else
    v := HyperbolicPair (U, u);
    W := OrthogonalComplement (U, sub<U|u,v>);
    assert Dimension (W) eq n-2;
    T := Matrix ([u] cat Basis (W) cat [v]);
    X := InnerProductMatrix (U);
    Y := T * X * Transpose (T);
    Y0 := ExtractBlock (Y, 2, 2, n-2, n-2);
    W0 := VectorSpace (F, n-2, Y0);
    G := IsometryGroup (W0);
    M := GModule (G);
    if IsIrreducible (M) then 
      N := M;
    else
      S := Submodules (M);
        // space of isotropic vectors ...
      assert exists (N){ J : J in S | Dimension (J) eq n-3 };  
    end if;
    vecs := [ W0!(M!(N.i)) : i in [1..Dimension (N)] ];
    one := Identity (MatrixAlgebra (F, n));
    gens := [ GL(n,F)!InsertBlock (one, G.i, 2, 2) : i in [1..Ngens (G)] ];
    for i in [1..Dimension (N)] do
      Z := one;
      y := vecs[i];
      x := y * Y0;
      InsertBlock (~Z, Transpose (Matrix (x)), 2, 1);
      InsertBlock (~Z, Matrix (y), n, 2);
      Append (~gens, GL(n,F)!Z);
    end for;
    
    // for good measure add center of unipotent radical ... although not needed 
    Z := one;   Z[n][1] := F!1;
    Append (~gens, Z);

  end if;

  gens := [ T^-1 * gens[i] * T : i in [1..#gens] ];

  // check gens fix u
  assert forall { g : g in gens | u * g eq u };

  // check gens are isometries of U
  assert forall { g : g in gens | IsIsometry (U, g) };

return sub < GL (n, F) | gens >;

end function;


/* PAB: probably should not be an intrinsic */

intrinsic VectorStabilizer (V::ModTupFld, v::ModTupFldElt) -> GrpMat 

{ The stabilizer of v in the group of isometries of the polar space V. }

  require IsPolarSpace (V) : "V must be equipped with an inner product";
  
  F := BaseRing (V);
  d := Dimension (V);
  X := InnerProductMatrix (V);
  R := Radical (V);
  r := Dimension (R);

  if r eq 0 then
    return __MyVectorStabilizerNondegenerate (V, v);
  end if;
  
  if v eq 0 then 
    return IsometryGroup (V);
  end if;

  if v in R then

    C := Complement (V, R);
    T := Matrix (Basis (C) cat Basis (R));
    Y := T * X * Transpose (T);

    // get the part that actually needs to be stabilized
    vT := v * T^-1;
    assert forall { i : i in [1..d-r] | vT[i] eq 0 };
    u := Vector ([ vT[i] : i in [1+d-r..d] ]);
    H := __MyVectorStabilizerGL (u);

    // add in isometries of nondegenerate block
    Y0 := ExtractBlock (Y, 1, 1, d-r, d-r);
    V0 := VectorSpace (F, d-r, Y0);
    I0 := IsometryGroup (V0);

    // insert as blocks
    one := Identity (MatrixAlgebra (F, d));
    gens := [ GL(d,F)!InsertBlock (one, H.i, 1+d-r, 1+d-r) : i in [1..Ngens (H)] ];
    gens cat:= [ GL(d,F)!InsertBlock (one, I0.i, 1, 1) : i in [1..Ngens (I0)] ];

    // add in unipotent elements
    for i in [1..d-r] do 
      for j in [1+d-r..d] do
        Z := one;
        Z[i][j] := F!1;
        Append (~gens, GL(d,F)!Z);
      end for;
    end for;

    // check gens are isometries of Y
    assert forall { g : g in gens | g * Y * Transpose (g) eq Y };

    // check that gens stabilize vT
    assert forall { g : g in gens | vT * g eq vT };

    S := sub < GL (d, F) | [ T^-1 * g * T : g in gens ] >;

  else

    C := Complement (V, R + sub < V | v >);
    T := Matrix ([v] cat Basis (C) cat Basis (R));
    Y := T * X * Transpose (T);

    // get the part that needs to be stabilized
    Y0 := ExtractBlock (Y, 1, 1, d-r, d-r);
    V0 := VectorSpace (F, d-r, Y0);
    H := __MyVectorStabilizerNondegenerate (V0, V0.1);   // v is 1st basis vector

    // insert as blocks
    one := Identity (MatrixAlgebra (F, d));
    gens := [ GL(d,F)!InsertBlock (one, H.i, 1, 1) : i in [1..Ngens (H)] ];
    // add in GL elements for radical
    G := GL (r, F);
    gens cat:= [ GL(d,F)!InsertBlock (one, G.i, 1+d-r, 1+d-r) : i in [1..Ngens (G)] ];

    // add in unipotent elements
    for i in [2..d-r] do    // not for 1st basis element
      for j in [1+d-r..d] do
        Z := one;
        Z[i][j] := F!1;
        Append (~gens, GL(d,F)!Z);
      end for;
    end for;

    // check gens are isometries of Y
    assert forall { g : g in gens | g * Y * Transpose (g) eq Y };

    // check that gens stabilize v*T
    assert forall { g : g in gens | v * T^-1 * g eq v * T^-1 };

    S := sub < GL (d, F) | [ T^-1 * g * T : g in gens ] >;
  
  end if;

  // sanity check that S is a subgroup of Isom(V)
  assert forall { i : i in [1..Ngens (S)] | IsIsometry (V, S.i) };

  // sanity check that S stabilizes v
  assert forall { i : i in [1..Ngens (S)] | v * S.i eq v };

return S;

end intrinsic;


intrinsic SymmetricMatrixSpace (K::Fld, d::RngIntElt) -> ModTupFld 
  { Construct the space of symmetric matrices of a given degree}
     E := VectorSpace (K, d * (d+1) div 2);
return sub < KMatrixSpace (K, d, d) | [ SymmetricMatrix (Eltseq (E.i)) : i in [1..Dimension (E)] ] >;
end intrinsic;
  

/* This should be somewhere else */
intrinsic IsStarSubalgebra (R::AlgMat, S::AlgMat) -> BoolElt
  { Decide whether the subalgebra S of *-algebra R is *-invariant }
     require IsStarAlgebra (R) : "R is not a *-algebra";
     require forall { s : s in Generators (S) | s in R } : 
         "S is not a subalgebra of R";
return forall { s : s in Generators (S) | s @ R`Star in S };
end intrinsic;

// PAB: I'm not sure a function exists in Magma to carry out this basic task
intrinsic LinearCombination (S::SeqEnum, x::ModTupFldElt) -> SeqEnum , SeqEnum
  { Given a list S of vectors in a vector space V, and x in the span of S,  
    write x as a linear combination of S and also the positions in S of 
    vectors that form a basis for the span of S. }

     // make sure the input is valid
     V := Generic (Parent (x)); 
     require forall { s : s in S | s in V } : "x and the elements of S do not live in the same vector space"; 

     // make sure x is in span(S)
     require x in sub < V | S > : "x is not in the span of S";

     // catch the trivial case
     if forall { s : s in S | s eq 0 } then
          assert x eq 0;
          return [ BaseRing (V)!1 ] cat [ BaseRing (V)!0 : i in [2..#S] ], [ ];
     end if;

     // find the positions of elements of S that form a basis for span(S)
     positions := [ ];
     T := [ ];
     while sub < V | T > ne sub < V | S > do
          assert exists (i){ j : j in [1..#S] | not S[j] in sub < V | T > };
          Append (~positions, i);
          Append (~T, S[i]);
     end while; 

     // compute the coordinates of x relative to T
     U := VectorSpaceWithBasis (T);
     assert x in U;
     cU := Coordinates (U, x);

     // pad out
     c := [ BaseRing (V)!0 : i in [1..#S] ];
     for i in [1..#T] do 
          c[positions[i]] := cU[i];
     end for;

     // final check 
     assert x eq &+[ c[i] * S[i] : i in [1..#S] ];

return c, positions;
end intrinsic;