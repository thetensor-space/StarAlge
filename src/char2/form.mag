/*
 * Created on 4/29/2022 by PAB. Updated on 5/30/2023 by PAB
 *
 * Functions that convert the problem of computing isometries of 
 * a systems of forms to computing unitarian elements of a *-algebra. 
 * Eventually there should be a single intrinsic that works in 
 * all characteristics for all possible systems of forms. 
*/


intrinsic RandomQuadraticForm (K::FldFin, d::RngIntElt) -> Mtrx
  { Matrix representing a random quadratic form. }
     assert d mod 2 eq 0;
     repeat
          Q := UpperTriangularMatrix ([ Random (K) : i in [1..d*(d+1) div 2] ]);
     until Rank (Q + Transpose (Q)) eq d;
return Q;
end intrinsic;

__QFTSA_dot := function (A, J)
return J^-1 * Transpose (A) * J;
end function;

__QFTSA_star := function (AB, J, X)
     d := Degree (Parent (J));
     A := ExtractBlock (AB, 1, 1, d, d);
     assert A eq ExtractBlock (AB, d+1, d+1, d, d);
     B := ExtractBlock (AB, 1, d+1, d, d);
     A := __QFTSA_dot (A, J);
     B := __QFTSA_dot (B, J) + X*A + A*X;
     AB_star := DiagonalJoin (A, A);
     InsertBlock (~AB_star, B, 1, d+1);
return AB_star;
end function;

intrinsic QuadraticFormToStarAlgebra (Q::Mtrx) -> AlgMat 
  { The *-algebra whose unitarian elements are the isometries of the given quadratic form }
     d := Degree (Parent (Q));
     K := BaseRing (Parent (Q));
     require Characteristic (K) eq 2 : "function only needed for characteristic 2 fields";
     ma := MatrixAlgebra (K, d);
     MA := MatrixAlgebra (K, 2*d);
     gens := [ DiagonalJoin (A, A) : A in Basis (ma) ];
     gens cat:= [ InsertBlock (MA!0, B, 1, d+1) : B in Basis (ma) ];
     R := sub < MA | gens >;
     SIGMA := Q + Transpose (Q);
     require Rank (SIGMA) eq d : "need nondegenerate polarization";
     X := SIGMA^-1 * Q;
     R`Star := hom < R -> R | Y :-> __QFTSA_star (Y, SIGMA, X) >;
return R;
end intrinsic;


