/* 
 * Created by PAB on 7/23/2021. 
 * Modified by PAB on 4/29/2022.
*/

import "util.mag" : StarDelta, StarTrace, StarNorm;


/*
 * Given a *-algebra, R, find the subgroup of the unitarian 
 * group A^# that lies in 1 + J(R). This method replaces the
 * power series trick used in the odd characteristic case.
 *
 * Note: in a future code overhaul there should be a single 
 * intrinsic that applies to *-algebras in all characteristics.
*/
intrinsic RadicalUnitarians (R::AlgMat : 
                               RANDOM := true   // how we compute the derived subgroup
                            ) -> GrpMat

  { Return the subgroup of R^# lying within 1 + J(R). }

  d := Degree (R);
  K := BaseRing (R); 
  // PAB : might as well have this function incorporate odd char as well
  require Characteristic (K) eq 2 : "method only applies in characteristic 2";
  k := Degree (K);
  rho := PrimitiveElement (K);
  one := Identity (R);

  // initialize
  J := JacobsonRadical (R);
  gens := &cat [ [ one + rho^j * J.i : j in [0..k-1] ] : i in [1..Ngens (J)] ];
  U := sub < GL (d, K) | gens >;
       vprint Isometry, 1 : "[RadUnit] initial order of U =", LMGOrder (U);
  Q := J;
  
  // refine G through the layers of the radical
  depth := 0;
  while Dimension (Q) gt 0 do

    depth +:= 1;
    QJ := Q * J;  
         vprint Isometry, 1 : "==================";
         vprint Isometry, 1 : "[RadUnit] layer of radical series =", depth;
         vprint Isometry, 1 : "[RadUnit] dim(Q) =", Dimension (Q), "   dim(Q*J) =", Dimension (QJ);
 
    // build matrix representing GF(2)-linear map <mu> : G / G^2 * [G,G] ---> K / U
    Q2, f := WriteOverSmallerField (Q, GF(2));
    QJ2 := sub < Q2 | [ QJ.i @ f : i in [1..Ngens (QJ)] ] >; 
    QmodQJ, pi := quo < Q2 | QJ2 >;

// test whether we'll be in the "easy generic" lifting case
tQ := sub < Q | [ StarTrace (R, Q.i) : i in [1..Ngens (Q)] ] >;
nU := sub < Q | [ StarNorm (R, R!(U.i)) - one : i in [1..Ngens (U)] ] >;
assert tQ subset nU;
generic := (tQ eq nU);
vprint Isometry, 1 : "[RadUnit] this is an easy generic case?", generic;

    M := Matrix ([ (StarDelta (R, R!(U.i) - one) @ f) @ pi : i in [1..Ngens (U)] ]);
    null := Nullspace (M);
    
    ker := sub < GL (d, K) | [
            &* [ U.i^Integers ()!(n[i]) : i in [1..Ngens (U)] ] : n in Basis (null)
                     ]
                >;

    // compute the derived subgroup of G: randomized or deterministic
    if RANDOM then
         DU := DerivedGroupMonteCarlo (U);
    else 
         DU := LMGDerivedGroup (U);
    end if;  

    U := sub < GL (d, K) | ker , DU , [ U.i^2 : i in [1..Ngens (U)] ] >;
         vprint Isometry, 1 : "[RadUnit] order of U =", #U;

    Q := QJ;
    
  end while;
    
// make sure the group does indeed consist of unitarian elements of R    
assert forall { i : i in [1..Ngens (U)] | U.i @ R`Star * U.i eq Identity (U) };

return U;

end intrinsic;




